name: CI

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      CODE_FOLDER:
        description: Folder code lives in
        required: true
        default: zigpy
        type: string
      CACHE_VERSION:
        description: Cache version
        required: true
        default: 2
        type: string
      PYTHON_VERSION_DEFAULT:
        description: Default Python version
        required: true
        default: 3.9.15
        type: string
      PRE_COMMIT_CACHE_PATH:
        description: Pre-commit cache path
        required: true
        default: ~/.cache/pre-commit
        type: string
      MINIMUM_COVERAGE_PERCENTAGE:
        description: Minimum code coverage percentage
        required: true
        default: 80
        type: string

jobs:
  # Separate job to pre-populate the base dependency cache
  # This prevent upcoming jobs to do the same individually
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8.14', '3.9.15', '3.10.8', '3.11.0']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.3.0
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.2.6
        with:
          path: venv
          key: >-
            ${{ inputs.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
          restore-keys: |
            ${{ inputs.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{ steps.python.outputs.python-version }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -U pip setuptools pre-commit
          pip install -r requirements_test.txt
          pip install -e .

  pre-commit:
    name: Run pre-commit
    runs-on: ubuntu-latest
    needs: prepare-base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.3.0
      - name: Set up Python ${{ inputs.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4.5.0
        id: python
        with:
          python-version: ${{ inputs.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v3.2.6
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ inputs.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Lint and static analysis
        uses: pre-commit/action@v3.0.0

  pytest:
    runs-on: ubuntu-latest
    needs: prepare-base
    strategy:
      matrix:
        python-version: ['3.8.14', '3.9.15', '3.10.8', '3.11.0']
    name: >-
      Run tests Python ${{ matrix.python-version }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.3.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.5.0
        id: python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v3.2.6
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ inputs.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Install Pytest Annotation plugin
        run: |
          . venv/bin/activate
          # Ideally this should be part of our dependencies
          # However this plugin is fairly new and doesn't run correctly
          # on a non-GitHub environment.
          pip install pytest-github-actions-annotate-failures
      - name: Run pytest
        run: |
          . venv/bin/activate
          pytest \
            -qq \
            --timeout=20 \
            --durations=10 \
            --cov ${{ inputs.CODE_FOLDER }} \
            -o console_output_style=count \
            -p no:sugar \
            tests
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.python-version }}
          path: .coverage

  coverage:
    name: Process test coverage
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.3.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.5.0
        id: python
        with:
          python-version: ${{ inputs.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v3.2.6
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ inputs.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3
      - name: Combine coverage results
        run: |
          . venv/bin/activate
          coverage combine coverage*/.coverage*
          coverage report --fail-under=${{ inputs.MINIMUM_COVERAGE_PERCENTAGE }}
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3